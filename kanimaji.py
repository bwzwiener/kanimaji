#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re, math, glob, os, sys, json
from lxml import etree
from lxml.builder import E
from svg.path import parse_path
from os.path import basename, abspath
from copy import deepcopy
from textwrap import dedent as d
import bezier_cubic
from settings import *

def compute_path_len(path):
    return parse_path(path).length(error=1e-8)

def shescape(path):
    return "'"+re.sub(r"(?=['\\\\])","\\\\",path)+"'"

# ease, ease-in, etc:
# https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function#ease
pt1 = bezier_cubic.pt(0,0)
ease_ct1 = bezier_cubic.pt(0.25, 0.1)
ease_ct2 = bezier_cubic.pt(0.25, 1.0)
ease_in_ct1 = bezier_cubic.pt(0.42, 0.0)
ease_in_ct2 = bezier_cubic.pt(1.0, 1.0)
ease_in_out_ct1 = bezier_cubic.pt(0.42, 0.0)
ease_in_out_ct2 = bezier_cubic.pt(0.58, 1.0)
ease_out_ct1 = bezier_cubic.pt(0.0, 0.0)
ease_out_ct2 = bezier_cubic.pt(0.58, 1.0)
pt2 = bezier_cubic.pt(1,1)

def linear(x):
    return x

def ease(x):
    return bezier_cubic.value(pt1, ease_ct1, ease_ct2, pt2, x)

def ease_in(x):
    return bezier_cubic.value(pt1, ease_in_ct1, ease_in_ct2, pt2, x)

def ease_in_out(x):
    return bezier_cubic.value(pt1, ease_in_out_ct1, ease_in_out_ct2, pt2, x)

def ease_out(x):
    return bezier_cubic.value(pt1, ease_out_ct1, ease_out_ct2, pt2, x)

timing_funcs = {
    'linear': linear,
    'ease': ease,
    'ease-in': ease_in,
    'ease-in-out': ease_in_out,
    'ease-out': ease_out
}

if not TIMING_FUNCTION in timing_funcs:
    exit('Sorry, invalid timing function "%s"', TIMING_FUNCTION)
my_timing_func = timing_funcs[TIMING_FUNCTION]

# we will need this to deal with svg
namespaces = {'n': "http://www.w3.org/2000/svg"}
etree.register_namespace("xlink","http://www.w3.org/1999/xlink")
parser = etree.XMLParser(remove_blank_text=True)

def create_animation(filename):
    print('processing %s' % filename)
    filename_noext = re.sub(r'\.[^\.]+$','',filename)
    filename_noext_ascii = re.sub(r'\\([\\u])','\\1',
                            json.dumps(filename_noext))[1:-1]
    baseid = basename(filename_noext_ascii)

    # load xml
    doc = etree.parse(filename, parser)

    # for xlink namespace introduction
    doc.getroot().set('{http://www.w3.org/1999/xlink}used','')

    #clear all extra elements this program may have previously added
    for el in doc.xpath("/n:svg/n:style", namespaces=namespaces):
        if re.match( r'-Kanimaji$', g.get('id') ):
            doc.getroot().remove(el)
    for g in doc.xpath("/n:svg/n:g", namespaces=namespaces):
        if re.match( r'-Kanimaji$', g.get('id') ):
            doc.getroot().remove(g)

    # create groups with a copies (references actually) of the paths
    bg_g = E.g(id = 'kvg:'+baseid+'-bg-Kanimaji',
            style = ('fill:none;stroke:%s;stroke-width:%f;'+
                'stroke-linecap:round;stroke-linejoin:round;') %
                (STOKE_UNFILLED_COLOR, STOKE_UNFILLED_WIDTH) )
    anim_g = E.g(id = 'kvg:'+baseid+'-anim-Kanimaji',
            style = ('fill:none;stroke:%s;stroke-width:%f;'+
                'stroke-linecap:round;stroke-linejoin:round;') %
                (STOKE_FILLED_COLOR, STOKE_FILLED_WIDTH) )
    if SHOW_BRUSH:
        brush_g = E.g(id = 'kvg:'+baseid+'-brush-Kanimaji',
                style = ('fill:none;stroke:%s;stroke-width:%f;'+
                'stroke-linecap:round;stroke-linejoin:round;') % 
                (BRUSH_COLOR, BRUSH_WIDTH))
        brush_brd_g = E.g(id = 'kvg:'+baseid+'-brush-brd-Kanimaji',
                style = ('fill:none;stroke:%s;stroke-width:%f;'+
                'stroke-linecap:round;stroke-linejoin:round;') % 
                (BRUSH_BORDER_COLOR, BRUSH_BORDER_WIDTH))

    # compute total length and time, at first
    totlen = 0
    tottime = 0

    for g in doc.xpath("/n:svg/n:g", namespaces=namespaces):
        if re.match( r'^kvg:StrokeNumbers_', g.get('id') ):
            continue
        for p in g.xpath(".//n:path", namespaces=namespaces):
            pathlen = compute_path_len(p.get('d'))
            duration = stroke_length_to_duration(pathlen)
            totlen += pathlen
            tottime += duration

    animation_time = time_rescale(tottime) #math.pow(3 * tottime, 2.0/3)
    tottime += WAIT_AFTER * tottime / animation_time
    actual_animation_time = animation_time
    animation_time += WAIT_AFTER

    css_header = d("""
    /* CSS automatically generated by kanimaji.py, do not edit! */
    """)
    if GENERATE_SVG:
        animated_css = css_header
    elapsedlen = 0
    elapsedtime = 0

    # add css elements for all strokes
    for g in doc.xpath("/n:svg/n:g", namespaces=namespaces):
        groupid = g.get('id')
        if re.match( r'^kvg:StrokeNumbers_', groupid ):
            rule = d("""
                #%s {
                    display: none;
                }""" % re.sub(r':', '\\\\3a ', groupid))
            if GENERATE_SVG:
                animated_css += rule
            continue

        gidcss = re.sub(r':', '\\\\3a ', groupid)
        rule = d("""
            #%s {
                stroke-width: %.01fpx !important;
                stroke:       %s !important;
            }""" % (gidcss, STOKE_BORDER_WIDTH, STOKE_BORDER_COLOR))
        if GENERATE_SVG:
            animated_css += rule

        for p in g.xpath(".//n:path", namespaces=namespaces):
            pathid = p.get('id')
            pathidcss = re.sub(r':', '\\\\3a ', pathid)

            bg_pathid = pathid+'-bg'
            bg_pathidcss = pathidcss+'-bg'
            ref = E.use(id = bg_pathid)
            ref.set('{http://www.w3.org/1999/xlink}href','#'+pathid)
            bg_g.append(ref)

            anim_pathid = pathid+'-anim'
            anim_pathidcss = pathidcss+'-anim'
            ref = E.use(id = anim_pathid)
            ref.set('{http://www.w3.org/1999/xlink}href','#'+pathid)
            anim_g.append(ref)

            if SHOW_BRUSH:
                brush_pathid = pathid+'-brush'
                brush_pathidcss = pathidcss+'-brush'
                ref = E.use(id = brush_pathid)
                ref.set('{http://www.w3.org/1999/xlink}href','#'+pathid)
                brush_g.append(ref)

                brush_brd_pathid = pathid+'-brush-brd'
                brush_brd_pathidcss = pathidcss+'-brush-brd'
                ref = E.use(id = brush_brd_pathid)
                ref.set('{http://www.w3.org/1999/xlink}href','#'+pathid)
                brush_brd_g.append(ref)

            pathname = re.sub(r'^kvg:','',pathid)
            pathlen = compute_path_len(p.get('d'))
            duration = stroke_length_to_duration(pathlen)
            relduration = duration * tottime / animation_time # unscaled time

            newelapsedlen = elapsedlen + pathlen
            newelapsedtime = elapsedtime + duration
            anim_start = elapsedtime/tottime*100
            anim_end = newelapsedtime/tottime*100

            if GENERATE_SVG:
                # animation stroke progression
                animated_css += d("""
                    @keyframes strike-%s {
                        0%% { stroke-dashoffset: %.03f; }
                        %.03f%% { stroke-dashoffset: %.03f; }
                        %.03f%% { stroke-dashoffset: 0; }
                        100%% { stroke-dashoffset: 0; }
                    }""" % (pathname, pathlen, anim_start, pathlen, anim_end))

                # animation visibility
                animated_css += d("""
                    @keyframes showhide-%s {
                        %.03f%% { visibility: hidden; }
                        %.03f%% { stroke: %s; }
                    }""" % (pathname, anim_start, anim_end, STOKE_FILLING_COLOR))

                # animation progression
                animated_css += d("""
                    #%s {
                        stroke-dasharray: %.03f %.03f;
                        stroke-dashoffset: 0;
                        animation: strike-%s %.03fs %s infinite,
                            showhide-%s %.03fs step-start infinite;
                    }""" % (anim_pathidcss, pathlen, pathlen, 
                            pathname, animation_time,
                            TIMING_FUNCTION,
                            pathname, animation_time))

                if SHOW_BRUSH:
                    # brush element visibility
                    animated_css += d("""
                        @keyframes showhide-brush-%s {
                            %.03f%% { visibility: hidden; }
                            %.03f%% { visibility: visible; }
                            100%% { visibility: hidden; }
                        }""" % (pathname, anim_start, anim_end))

                    # brush element progression
                    animated_css += d("""
                        #%s, #%s {
                            stroke-dasharray: 0 %.03f;
                            animation: strike-%s %.03fs %s infinite,
                                showhide-brush-%s %.03fs step-start infinite;
                        }""" % (brush_pathidcss, brush_brd_pathidcss,
                            pathlen, 
                            pathname, animation_time, TIMING_FUNCTION,
                            pathname, animation_time))

            elapsedlen = newelapsedlen
            elapsedtime = newelapsedtime

    # insert groups
    if SHOW_BRUSH and not SHOW_BRUSH_FRONT_BORDER:
        doc.getroot().append(brush_brd_g)
    doc.getroot().append(bg_g)
    if SHOW_BRUSH and SHOW_BRUSH_FRONT_BORDER:
        doc.getroot().append(brush_brd_g)
    doc.getroot().append(anim_g)
    if SHOW_BRUSH:
        doc.getroot().append(brush_g)

    if GENERATE_SVG:
        style = E.style(animated_css, id="style-Kanimaji")
        doc.getroot().insert(0, style)
        svgfile = filename_noext + '_anim.svg'
        doc.write(svgfile, pretty_print=True)
        doc.getroot().remove(style)
        print('written %s' % svgfile)

args = deepcopy(sys.argv)
del args[0]
for a in args:
    create_animation(a)
